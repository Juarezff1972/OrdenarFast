<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BinaryInsertionSortString" xml:space="preserve">
    <value>
Procedimento BinaryInsertionSort()
inicio
	para (Inteiro i = 1; i &lt; vetor.Tamanho; ++i)
	inicio
		Inteiro chave = vetor[i].Valor;

		Inteiro baixo = 0, alto = i;
		Faça Enquanto (baixo &lt; alto)
		inicio
			Inteiro meio = (baixo + alto) / 2;
			Se (chave &lt;= vetor[meio].Valor)
			inicio
				alto = meio;
			fim
			Senão
			inicio
				baixo = meio + 1;
			fim
		fim
		Inteiro j = i - 1;
		Faça Enquanto (j &gt;= baixo)
		inicio
			Troca(j, j + 1);
			j--;
		fim
	fim
fim
</value>
  </data>
  <data name="BitonicSortString" xml:space="preserve">
    <value>
Procedimento BitonicSort()
inicio
	BitonicSort(0, vetor.Tamanho, CRESCENTE);
fim

Procedimento Bitonic_compare(Inteiro i, Inteiro j, Booleano dir)
inicio
	Se (dir == (vetor[i].ComparaCom(vetor[j]) == 1))
	inicio
		Troca(i, j);
	fim
fim

Procedimento BitonicMerge(Inteiro baixo, Inteiro n, Booleano dir)
inicio
	Se (n &gt; 1)
	inicio
		Inteiro m = MaiorPotenciaDeDoisMenorQue(n);
		para (Inteiro i = baixo; i &lt; baixo + n - m; i++)
		inicio
			Bitonic_compare(i, i + m, dir);
		fim

		BitonicMerge(baixo, m, dir);
		BitonicMerge(baixo + m, n - m, dir);
	fim
fim

Procedimento BitonicSort(Inteiro baixo, Inteiro n, Booleano dir)
inicio
	Se (n &gt; 1)
	inicio
		Inteiro m = n / 2;
		BitonicSort(baixo, m, !dir);
		BitonicSort(baixo + m, n - m, dir);
		BitonicMerge(baixo, n, dir);
	fim
fim
</value>
  </data>
  <data name="BubbleSortString" xml:space="preserve">
    <value>
Procedimento BubbleSort()
inicio
	para (Inteiro i = 0; i &lt; vetor.Tamanho - 1; ++i)
	inicio
		para (Inteiro j = 0; j &lt; vetor.Tamanho - 1 - i; ++j)
		inicio
			Se (vetor[j].ComparaCom(vetor[j + 1]) == 1)
			inicio
				Troca(j, j + 1);
			fim
		fim
	fim
fim
</value>
  </data>
  <data name="BubbleSort2String" xml:space="preserve">
    <value>
Procedimento BubbleSort2()
inicio
	Inteiro i;
	Inteiro j;
	Inteiro max;
	Inteiro maxidx = 0;
	para (i = vetor.Tamanho - 1; i &gt;= 0; i--)
	inicio
		max = 0;
		para (j = 0; j &lt; i; j++)
		inicio
			Se (max &lt; vetor[j].Valor)
			inicio
				maxidx = j;
			fim
		fim
		Se (vetor[i].ComparaCom(vetor[maxidx]) == -1)
		inicio
			Troca(i, maxidx);
		fim
	fim
fim
</value>
  </data>
  <data name="BubbleSort3String" xml:space="preserve">
    <value>
Procedimento BubbleSort3()
inicio
	Inteiro i;
	Inteiro max;
	Inteiro maxidx = 0;
	Inteiro minidx = vetor.Tamanho - 1;
	Inteiro min;
	Inteiro inicio = 0;
	Inteiro final = vetor.Tamanho;
	Faça Enquanto (inicio &lt; final)
	inicio
		max = 0;
		min = vetor.Max().Valor + 1;
		para (i = inicio; i &lt; final; i++)
		inicio
			Se (max &lt; vetor[i].Valor)
			inicio
				max = vetor[i].Valor;
				maxidx = i;
			fim
			Se (min &gt; vetor[i].Valor)
			inicio
				min = vetor[i].Valor;
				minidx = i;
			fim
		fim
		Se (vetor[final - 1].ComparaCom(vetor[maxidx]) == -1)
		inicio
			Troca(maxidx, final - 1);
			Se ((final - 1) == minidx)
			inicio
				minidx = maxidx;
			fim
		fim
		Se (vetor[inicio].ComparaCom(vetor[minidx]) == 1)
		inicio
			Troca(minidx, inicio);
		fim
		final--;
		inicio++;
	fim
fim
</value>
  </data>
  <data name="CocktailShakerSortString" xml:space="preserve">
    <value>
Procedimento CocktailShakerSort()
inicio
	Inteiro baixo = 0;
	Inteiro alto = vetor.Tamanho - 1;
	Inteiro mov = baixo;

	Faça Enquanto (baixo &lt; alto)
	inicio
		para (Inteiro i = alto; i &gt; baixo; --i)
		inicio
			Se (vetor[i - 1].ComparaCom(vetor[i]) == 1)
			inicio
				Troca(i - 1, i);
				mov = i;
			fim
		fim
		baixo = mov;

		para (Inteiro i = baixo; i &lt; alto; ++i)
		inicio
			Se (vetor[i].ComparaCom(vetor[i + 1]) == 1)
			inicio
				Troca(i, i + 1);
				mov = i;
			fim
		fim
		alto = mov;
	fim
fim
</value>
  </data>
  <data name="CombSortString" xml:space="preserve">
    <value>
Procedimento CombSort()
inicio
	constante Dupbaixo encolhe = 1.3;

	Booleano Trocado = FALSO;
	Inteiro fenda = vetor.Tamanho;
	Faça Enquanto ((fenda &gt; 1) || Trocado)
	inicio
		Se (fenda &gt; 1)
		inicio
			fenda = (Inteiro)((PontoFlutuante)fenda / encolhe);
		fim

		Trocado = FALSO;

		para (Inteiro i = 0; fenda + i &lt; vetor.Tamanho; ++i)
		inicio
			piv1.Value = i + fenda + 1;
			Se (vetor[i].ComparaCom(vetor[i + fenda]) == 1)
			inicio
				Troca(i, i + fenda);
				Trocado = VERDADEIRO;
			fim
		fim
	fim
fim
</value>
  </data>
  <data name="CountingSortString" xml:space="preserve">
    <value>
Procedimento CountingSort()
inicio
	Inteiro max = vetor.Tamanho - 1;
	Inteiro mc = vetor.Max().Valor;
	Longo[] cnt = new Longo[mc + 1];
	Inteiro[] b = new Inteiro[max + 1];
	Longo idx;

	Inteiro j;

	para (j = 0; j &lt;= max; j++)
	inicio
		Inteiro l = vetor[j].Valor;
		cnt[l]++;
		b[j] = vetor[j].Valor;
	fim
	para (Inteiro i = 1; i &lt;= mc; i++)
	inicio
		cnt[i] = cnt[i] + cnt[i - 1];
	fim
	para (j = max; j &gt;= 0; j--)
	inicio
		idx = vetor[j].Valor;
		b[cnt[idx] - 1] = vetor[j].Valor;
		cnt[idx]--;
	fim
	para (j = 0; j &lt;= max; j++)
	inicio
		vetor[j].Valor = b[j];
	fim
fim
</value>
  </data>
  <data name="CycleSortString" xml:space="preserve">
    <value>
Procedimento CycleSort()
inicio
	Inteiro inicio_ciclo;
	Inteiro tmp;
	para (inicio_ciclo = 0; inicio_ciclo &lt; vetor.Tamanho - 1; inicio_ciclo++)
	inicio
		Inteiro item = vetor[inicio_ciclo].Valor;
		Inteiro pos = inicio_ciclo;

		para (Inteiro i = inicio_ciclo + 1; i &lt; vetor.Tamanho; i++)
		inicio
			Se (vetor[i].Valor &lt; item)
			inicio
				pos++;
			fim
		fim

		Se (pos != inicio_ciclo)
		inicio
			Faça Enquanto (item == vetor[pos].Valor)
			inicio
				pos++;
			fim

			tmp = vetor[pos].Valor;
			vetor[pos].Valor = item;
			item = tmp;

			Faça Enquanto (pos != inicio_ciclo)
			inicio
				piv1.Value = pos + 1;
				pos = inicio_ciclo;
				para (Inteiro i = inicio_ciclo + 1; i &lt; vetor.Tamanho; i++)
				inicio
					Se (vetor[i].Valor &lt; item)
					inicio
						pos++;
					fim
					piv2.Value = i;
				fim
				Faça Enquanto (item == vetor[pos].Valor)
				inicio
					pos++;
				fim
				tmp = vetor[pos].Valor;
				vetor[pos].Valor = item;
				item = tmp;
			fim
		fim
	fim
fim
</value>
  </data>
  <data name="FlashSortString" xml:space="preserve">
    <value>
Procedimento FlashSort(Inteiro comprimento)
inicio

	Inteiro m = (Inteiro)((0.2 * comprimento) + 2);
	Inteiro min, max, maxIndex;
	min = max = vetor[0].Valor;
	maxIndex = 0;


	para (Inteiro i = 1; i &lt; comprimento - 1; i += 2)
	inicio
		Inteiro small;
		Inteiro big;
		Inteiro bigIndex;

		Se (vetor[i].Valor &lt; vetor[i + 1].Valor)
		inicio
			small = vetor[i].Valor;
			big = vetor[i + 1].Valor;
			bigIndex = i + 1;
		fim
		Senão
		inicio
			big = vetor[i].Valor;
			bigIndex = i;
			small = vetor[i + 1].Valor;
		fim

		Se (big &gt; max)
		inicio
			max = big;
			maxIndex = bigIndex;
		fim

		Se (small &lt; min)
		inicio
			min = small;
		fim
	fim
	Se (vetor[comprimento - 1].Valor &lt; min)
	inicio
		min = vetor[comprimento - 1].Valor;
	fim
	Senão Se (vetor[comprimento - 1].Valor &gt; max)
	inicio
		max = vetor[comprimento - 1].Valor;
		maxIndex = comprimento - 1;
	fim

	Se (max == min)
	inicio
		Fim_Do_Procedimento;
	fim

	Inteiro[] L = new Inteiro[m + 1];

	para (Inteiro t = 1; t &lt;= m; t++)
	inicio
		L[t] = 0;
	fim
	Duplo c = (m - 1.0) / (max - min);
	Inteiro K;
	para (Inteiro h = 0; h &lt; comprimento; h++)
	inicio
		K = ((Inteiro)((vetor[h].Valor - min) * c)) + 1;
		L[K] += 1;
	fim
	para (K = 2; K &lt;= m; K++)
	inicio
		L[K] = L[K] + L[K - 1];
	fim
	Troca(maxIndex, 0);
	Inteiro j = 0;
	K = m;
	Inteiro numMoves = 0;
	Faça Enquanto (numMoves &lt; comprimento)
	inicio
		Faça Enquanto (j &gt;= L[K])
		inicio
			j++;
			K = ((Inteiro)((vetor[j].Valor - min) * c)) + 1;
		fim
		Inteiro expulso = vetor[j].Valor;
		Faça Enquanto (j &lt; L[K])
		inicio
			K = ((Inteiro)((expulso - min) * c)) + 1;
			Inteiro local = L[K] - 1;
			(expulso, vetor[local].Valor) = (vetor[local].Valor, expulso);
			L[K] -= 1;
			numMoves++;
		fim
	fim
	InsertSort();
fim

Procedimento FlashSort()
inicio
	FlashSort(vetor.Tamanho);
fim
</value>
  </data>
  <data name="GnomeSortString" xml:space="preserve">
    <value>
Procedimento GnomeSort()
inicio
	para (Inteiro i = 1; i &lt; vetor.Tamanho;)
	inicio
		Se (vetor[i].ComparaCom(vetor[i - 1]) &gt;= 0) //Se for igual
		inicio
			++i;
		fim
		Senão
		inicio
			Troca(i, i - 1);
			Se (i &gt; 1)
			inicio
				--i;
			fim
		fim
	fim
fim
</value>
  </data>
  <data name="HeapSortString" xml:space="preserve">
    <value>
Procedimento HeapSort()
inicio
	Inteiro n = vetor.Tamanho, i = n / 2;
	Duplo cores;

	Faça Enquanto (VERDADEIRO)
	inicio
		Se (i &gt; 0)
		inicio
			i--;
		fim
		Senão
		inicio
			n--;
			Se (n == 0)
			inicio
				Fim_Do_Procedimento;
			fim

			Troca(0, n);
		fim

		Inteiro noPai = i;
		Inteiro noFilho = i * 2 + 1;

		Faça Enquanto (noFilho &lt; n)
		inicio
			Se (noFilho + 1 &lt; n &amp;&amp; (vetor[noFilho + 1].ComparaCom(vetor[noFilho]) == 1))
			inicio
				noFilho++;
			fim
			Se (vetor[noFilho].ComparaCom(vetor[noPai]) == 1)
			inicio
				Troca(noPai, noFilho);
				noPai = noFilho;
				noFilho = noPai * 2 + 1;
			fim
			Senão
			inicio
				Sai_do_Laço;
			fim
		fim
	fim
fim
	</value>
  </data>
  <data name="InsertSortString" xml:space="preserve"><value>
Procedimento InsertSort()
inicio
	para (Inteiro i = 1; i &lt; vetor.Tamanho; ++i)
	inicio
		Inteiro chave = vetor[i].Valor;
		Inteiro j = i - 1;
		Faça Enquanto (j &gt;= 0 &amp;&amp; vetor[j].Valor &gt; chave)
		inicio
			Troca(j, j + 1);
			j--;
		fim
	fim
fim
</value></data>
<data name="InsertSort2String" xml:space="preserve"><value>
Procedimento InsertSort2()
inicio
	para (Inteiro i = 1; i &lt; vetor.Tamanho; ++i)
	inicio
		Inteiro tmp, chave = vetor[i].Valor;
		Inteiro j = i - 1;
		Faça Enquanto (j &gt;= 0 &amp;&amp; (tmp = vetor[j].Valor) &gt; chave)
		inicio
			vetor[j + 1].Valor = tmp;
			j--;
		fim
		vetor[j + 1].Valor = chave;
	fim
fim
</value></data>
<data name="OddEvenSortString" xml:space="preserve"><value>
Procedimento OddEvenSort()
inicio
	Booleano ordenado = FALSO;
	Faça Enquanto (!ordenado)
	inicio
		ordenado = VERDADEIRO;

		para (Inteiro i = 1; i &lt; vetor.Tamanho - 1; i += 2)
		inicio
			Se (vetor[i].ComparaCom(vetor[i + 1]) == 1)
			inicio
				Troca(i, i + 1);
				ordenado = FALSO;
			fim
			vetor[i].SetColorIDX(1);
		fim

		para (Inteiro i = 0; i &lt; vetor.Tamanho - 1; i += 2)
		inicio
			Se (vetor[i].ComparaCom(vetor[i + 1]) == 1)
			inicio
				Troca(i, i + 1);
				ordenado = FALSO;
			fim
		fim
	fim
fim
</value></data>
<data name="PancakeSortString" xml:space="preserve"><value>
Procedimento Virar(Inteiro k)
inicio
	Inteiro esquerda = 0;
	Faça Enquanto (esquerda &lt; k)
	inicio
		Troca(k, esquerda);
		k--;
		esquerda++;
	fim
fim

Função Inteiro MaxIndex(Inteiro k)
inicio
	Inteiro index = 0;
	para (Inteiro i = 0; i &lt; k; i++)
	inicio
		Se (vetor[i].ComparaCom(vetor[index]) == 1)
		inicio
			index = i;
		fim
	fim
	Retorne_Função index;
fim

Procedimento PancakeSort(Inteiro n)
inicio
	Inteiro maxdex;
	Faça Enquanto (n &gt; 1)
	inicio
		maxdex = MaxIndex(n);
		Se (maxdex != n)
		inicio
			Virar(maxdex);
			Virar(n - 1);
		fim
		n--;
	fim
fim

Procedimento PancakeSort()
inicio
	PancakeSort(vetor.Tamanho);
fim
</value></data>
<data name="PigeonHoleSortString" xml:space="preserve"><value>
Procedimento pigeonholeSort()
inicio
	Inteiro min = vetor[0].Valor;
	Inteiro max = vetor[0].Valor;
	Inteiro range, i, j, index;
	Inteiro n = vetor.Tamanho;

	para (Inteiro a = 0; a &lt; n; a++)
	inicio
		Se (vetor[a].Valor &gt; max)
		inicio
			max = vetor[a].Valor;
		fim
		Se (vetor[a].Valor &lt; min)
		inicio
			min = vetor[a].Valor;
		fim
	fim

	range = max - min + 1;
	Inteiro[] pigeonHoles = new Inteiro[range];

	para (i = 0; i &lt; n; i++)
	inicio
		pigeonHoles[vetor[i].Valor - min]++;
	fim

	index = 0;

	para (j = 0; j &lt; range; j++)
	inicio
		Faça Enquanto (pigeonHoles[j]-- &gt; 0)
		inicio
			vetor[index++].Valor = j + min;
		fim
	fim
	Fim_Do_Procedimento;
fim
</value></data>
<data name="QuickSortString" xml:space="preserve"><value>
Procedimento SetQuickSortPivot(string q)
inicio
	g_quicksort_pivot = q;
fim

Procedimento QuickSortDualPivot()
inicio
	QuickSortDualPivotYaroslavskiy(0, vetor.Tamanho - 1);
fim

Procedimento QuickSortLL()
inicio
	QuickSortLL(0, vetor.Tamanho);
fim

Procedimento QuickSortLR()
inicio
	QuickSortLR(0, vetor.Tamanho - 1);
fim

Procedimento QuickSortTernaryLR()
inicio
	QuickSortTernaryLR(0, vetor.Tamanho - 1);
fim

Procedimento QuickSortDualPivotYaroslavskiy(Inteiro esquerda, Inteiro direita)
inicio
	Se (direita &gt; esquerda)
	inicio
		Se (vetor[esquerda].ComparaCom(vetor[direita]) == 1)
		inicio
			Troca(esquerda, direita);
		fim

		Inteiro p1 = vetor[esquerda].Valor;
		Inteiro q = vetor[direita].Valor;

		Inteiro l = esquerda + 1;
		Inteiro g = direita - 1;
		Inteiro k = l;

		Faça Enquanto (k &lt;= g)
		inicio
			Se (vetor[k].Valor &lt; p1)
			inicio
				Troca(k, l);
				++l;
			fim
			Senão Se (vetor[k].Valor &gt;= q)
			inicio
				Faça Enquanto (vetor[g].Valor &gt; q &amp;&amp; k &lt; g)
				inicio
					--g;
				fim

				Troca(k, g);
				--g;
				Se (vetor[k].Valor &lt; p1)
				inicio
					Troca(k, l);
					++l;
				fim
			fim
			++k;
		fim
		--l;
		++g;
		Troca(esquerda, l);
		Troca(direita, g);
		QuickSortDualPivotYaroslavskiy(esquerda, l - 1);
		QuickSortDualPivotYaroslavskiy(l + 1, g - 1);
		QuickSortDualPivotYaroslavskiy(g + 1, direita);
	fim
fim

Função Inteiro QuickSortSelectPivot(Inteiro baixo, Inteiro alto)
inicio
	piv1.Value = baixo + 1;
	piv2.Value = alto;
	Random rnd;
	Se (g_quicksort_pivot == PIVO_PRIMEIRO)
	inicio
		Retorne_Função baixo;
	fim

	Se (g_quicksort_pivot == PIVO_ULTIMO)
	inicio
		Retorne_Função alto - 1;
	fim

	Se (g_quicksort_pivot == PIVO_MEIO)
	inicio
		Retorne_Função (baixo + alto) / 2;
	fim

	Se (g_quicksort_pivot == PIVO_ALEATORIO)
	inicio
		Retorne_Função baixo + (rnd.Next() % (alto - baixo));
	fim

	Se (g_quicksort_pivot == PIVO_MEDIANA)
	inicio
		Inteiro meio = (baixo + alto) / 2;

		Se (vetor[baixo].ComparaCom(vetor[meio]) == 0)
		inicio
			Retorne_Função baixo;
		fim

		Se (vetor[baixo].ComparaCom(vetor[alto - 1]) == 0 || vetor[meio].ComparaCom(vetor[alto - 1]) == 0)
		inicio
			Retorne_Função alto - 1;
		fim

		Retorne_Função vetor[baixo].ComparaCom(vetor[meio]) == -1
			? (vetor[meio].ComparaCom(vetor[alto - 1]) == -1 ? meio : (vetor[baixo].ComparaCom(vetor[alto - 1]) == -1 ? alto - 1 : baixo))
			: (vetor[meio].ComparaCom(vetor[alto - 1]) == 1 ? meio : (vetor[baixo].ComparaCom(vetor[alto - 1]) == -1 ? baixo : alto - 1));
	fim

	Retorne_Função baixo;
fim

Procedimento QuickSortLL(Inteiro baixo, Inteiro alto)
inicio
	Se (baixo + 1 &lt; alto)
	inicio
		Inteiro meio = QuickSortLLPartition(baixo, alto);

		QuickSortLL(baixo, meio);
		QuickSortLL(meio + 1, alto);
	fim
fim

Função Inteiro QuickSortLLPartition(Inteiro baixo, Inteiro alto)
inicio

	Inteiro p1 = QuickSortSelectPivot(baixo, alto);

	Inteiro pivot = vetor[p1].Valor;
	Troca(p1, alto - 1);
	Inteiro i = baixo;

	para (Inteiro j = baixo; j &lt; alto - 1; ++j)
	inicio
		Se (vetor[j].Valor &lt;= pivot)
		inicio
			Troca(i, j);
			++i;
		fim
	fim

	Troca(i, alto - 1);
	Retorne_Função i;
fim

Procedimento QuickSortLR(Inteiro baixo, Inteiro alto)
inicio
	Inteiro p1 = QuickSortSelectPivot(baixo, alto + 1);

	Inteiro pivot = vetor[p1].Valor;

	Inteiro i = baixo, j = alto;
	Faça Enquanto (i &lt;= j)
	inicio
		Faça Enquanto (vetor[i].Valor &lt; pivot)
		inicio
			i++;
		fim

		Faça Enquanto (vetor[j].Valor &gt; pivot)
		inicio
			j--;
		fim

		Se (i &lt;= j)
		inicio
			Troca(i, j);

			Se (p1 == i)
			inicio
				p1 = j;
			fim
			Senão Se (p1 == j)
			inicio
				p1 = i;
			fim

			i++;
			j--;
		fim
	fim

	Pausa();

	Se (baixo &lt; j)
	inicio
		QuickSortLR(baixo, j);
	fim

	Se (i &lt; alto)
	inicio
		QuickSortLR(i, alto);
	fim
fim

Procedimento QuickSortTernaryLR(Inteiro baixo, Inteiro alto)
inicio
	Se (alto &lt;= baixo)
	inicio
		Fim_Do_Procedimento;
	fim

	Inteiro cmp;

	Inteiro piv = QuickSortSelectPivot(baixo, alto + 1);
	Troca(piv, alto);
	vetor[alto].SetColorIDX(1);

	Inteiro pivot = vetor[alto].Valor;

	Inteiro i = baixo;
	Inteiro j = alto - 1;
	Inteiro p1 = baixo;
	Inteiro q = alto - 1;

	para (; ; )
	inicio
		Faça Enquanto (i &lt;= j &amp;&amp; ((cmp = Comp(vetor[i].Valor, pivot)) &lt;= 0))
		inicio
			Se (cmp == 0)
			inicio
				Troca(i, p1++);
			fim
			++i;
		fim

		Faça Enquanto (i &lt;= j &amp;&amp; ((cmp = Comp(vetor[j].Valor, pivot)) &gt;= 0))
		inicio
			Se (cmp == 0)
			inicio
				Troca(j, q--);
			fim
			--j;
		fim

		Se (i &gt; j)
		inicio
			Sai_do_Laço;
		fim

		Troca(i++, j--);
	fim

	Troca(i, alto);
	Pausa();

	Inteiro numero_menor = i - p1;
	Inteiro numero_maior = q - j;

	j = i - 1; i += 1;

	Inteiro pe = baixo + Math.Min(p1 - baixo, numero_menor);
	para (Inteiro k = baixo; k &lt; pe; k++, j--)
	inicio
		Troca(k, j);
	fim

	Inteiro qe = alto - 1 - Math.Min(alto - 1 - q, numero_maior - 1); 
	para (Inteiro k = alto - 1; k &gt; qe; k--, i++)
	inicio
		Troca(i, k);
	fim

	QuickSortTernaryLR(baixo, baixo + numero_menor - 1);
	QuickSortTernaryLR(alto - numero_maior + 1, alto);
fim
</value></data>
<data name="RadixSortLSDString" xml:space="preserve"><value>
Procedimento RadixSortLSD()
inicio
	constante Inteiro RADIX = 10;

	uInteiro pmax = (uInteiro)Math.Ceiling(Math.Log(vetor.Max().Valor + 1) / Math.Log(RADIX));
	para (uInteiro p1 = 0; p1 &lt; pmax; ++p1)
	inicio
		Inteiro base1 = (Inteiro)Potencia(RADIX, p1);

		Inteiro[] contagem = new Inteiro[RADIX];
		Inteiro[] copia = new Inteiro[vetor.Tamanho];

		para (Inteiro i = 0; i &lt; vetor.Tamanho; ++i)
		inicio
			copia[i] = vetor[i].Valor;
			Inteiro r = copia[i] / base1 % RADIX;
			contagem[r]++;
		fim

		Inteiro[] bkt = new Inteiro[RADIX + 1];
		para (Inteiro z = 0; z &lt; contagem.Tamanho; z++)
		inicio
			para (Inteiro y = 0; y &lt;= z; y++)
			inicio
				bkt[z + 1] += contagem[y];
			fim
		fim

		para (Inteiro i = 0; i &lt; bkt.Tamanho - 1; ++i)
		inicio
			Se (bkt[i] &gt;= vetor.Tamanho)
			inicio
				continue;
			fim
		fim

		para (Inteiro i = 0; i &lt; vetor.Tamanho; ++i)
		inicio
			Inteiro r = copia[i] / base1 % RADIX;
			vetor[bkt[r]++].Valor = copia[i];
		fim
	fim
fim
</value></data>
<data name="RadixSortMSDString" xml:space="preserve"><value>
Procedimento RadixSortMSD(Inteiro baixo, Inteiro alto, Inteiro profundidade)
inicio
	constante uInteiro RADIX = 10;

	uInteiro pmax = (uInteiro)ArredondaPraBaixo(Math.Log(vetor.Max().Valor + 1) / Math.Log(RADIX));
	uInteiro base1 = (uInteiro)Potencia(RADIX, pmax - profundidade);

	Inteiro[] contagem = new Inteiro[RADIX];

	para (Inteiro i = baixo; i &lt; alto; ++i)
	inicio
		uInteiro r = (uInteiro)vetor[i].Valor / base1 % RADIX;
		piv1.Value = i + 1;
		contagem[r]++;
	fim

	Inteiro[] bkt = new Inteiro[RADIX];
	para (Inteiro z = 0; z &lt; contagem.Tamanho; z++)
	inicio
		para (Inteiro y = 0; y &lt;= z; y++)
		inicio
			bkt[z] += contagem[y];
		fim
	fim

	para (Inteiro i = 0; i &lt; bkt.Tamanho; ++i)
	inicio
		Se (bkt[i] == 0)
		inicio
			continue;
		fim

		piv2.Value = baixo + bkt[i];
	fim

	para (Inteiro i = 0, j; i &lt; (alto - baixo);)
	inicio
		Faça Enquanto ((j = --bkt[(vetor[baixo + i].Valor / base1 % RADIX)]) &gt; i)
		inicio
			Troca(baixo + i, baixo + j);
		fim
		i += contagem[(vetor[baixo + i].Valor / base1 % RADIX)];
	fim

	Se (profundidade + 1 &gt; pmax)
	inicio
		Fim_Do_Procedimento;
	fim

	Inteiro sum = baixo;
	para (Inteiro i = 0; i &lt; RADIX; ++i)
	inicio
		Se (contagem[i] &lt;= 1)
		inicio
			continue;
		fim

		RadixSortMSD(sum, sum + contagem[i], profundidade + 1);
		sum += contagem[i];
	fim
fim

Procedimento RadixSortMSD()
inicio
	RadixSortMSD(0, vetor.Tamanho, 0);
fim
</value></data>
<data name="SelectionSortString" xml:space="preserve"><value>
Procedimento SelectionSort()
inicio
	para (Inteiro i = 0; i &lt; vetor.Tamanho - 1; ++i)
	inicio
		Inteiro jMin = i;
		para (Inteiro j = i + 1; j &lt; vetor.Tamanho; ++j)
		inicio
			piv2.Value = j + 1;
			Se (vetor[j].ComparaCom(vetor[jMin]) == -1)
			inicio
				jMin = j;
			fim
		fim

		Troca(i, jMin);

		Se (i &gt; 0)
		inicio
			vetor[i - 1].SetColorIDX(3);
		fim

		piv1.Value = i + 1;
	fim
fim
</value></data>
<data name="ShellSortString" xml:space="preserve"><value>
Procedimento ShellSort()
inicio
	Inteiro[] incs = [1391376, 463792, 198768, 86961, 33936, 13776, 4592, 1968, 861, 336, 112, 48, 21, 7, 3, 1];
	para (Inteiro k = 0; k &lt; 16; k++)
	inicio
		para (Inteiro h = incs[k], i = h; i &lt; vetor.Tamanho; i++)
		inicio
			Inteiro v = vetor[i].Valor;
			Inteiro j = i;
			Faça Enquanto (j &gt;= h &amp;&amp; vetor[j - h].Valor &gt; v)
			inicio
				vetor[j].Valor = vetor[j - h].Valor;
				j -= h;
			fim
			vetor[j].Valor = v;
		fim
	fim
fim
</value></data>
<data name="MergeSortString" xml:space="preserve"><value>
Procedimento Merge(Inteiro baixo, Inteiro meio, Inteiro alto)
inicio
	Inteiro[] outA;

	outA = new Inteiro[alto - baixo];
	Inteiro i = baixo; Inteiro j = meio; Inteiro o = 0; 
	Faça Enquanto (i &lt; meio &amp;&amp; j &lt; alto)
	inicio
		Inteiro ai = vetor[i].Valor;
		Inteiro aj = vetor[j].Valor;
		Se (ai &lt; aj)
		inicio
			++i;
			outA[o++] = ai;
		fim
		Senão
		inicio
			++j;
			outA[o++] = aj;
		fim
	fim

	Faça Enquanto (i &lt; meio)
	inicio
		outA[o++] = vetor[i++].Valor;
	fim

	Faça Enquanto (j &lt; alto)
	inicio
		outA[o++] = vetor[j++].Valor;
	fim

	para (i = 0; i &lt; alto - baixo; ++i)
	inicio
		vetor[baixo + i].Valor = outA[i];
	fim
fim

Procedimento MergeSort(Inteiro baixo, Inteiro alto)
inicio
	Se (baixo + 1 &lt; alto)
	inicio
		Inteiro meio = (baixo + alto) / 2;

		MergeSort(baixo, meio);
		MergeSort(meio, alto);

		Merge(baixo, meio, alto);
	fim
fim

Procedimento MergeSort()
inicio
	MergeSort(0, vetor.Tamanho);
fim
</value></data>
<data name="SlowSortString" xml:space="preserve"><value>
Procedimento SlowSort(Inteiro i, Inteiro j)
inicio
	Se (i &gt;= j)
	inicio
		Fim_Do_Procedimento;
	fim

	Inteiro m = (i + j) / 2;

	piv1.Value = m + 1;

	SlowSort(i, m);
	SlowSort(m + 1, j);

	Se (vetor[m].ComparaCom(vetor[j]) == 1)
	inicio
		Troca(m, j);
	fim

	SlowSort(i, j - 1);
fim
Procedimento SlowSort()
inicio
	SlowSort(0, vetor.Tamanho - 1);
fim
</value></data>
<data name="GravitySortString" xml:space="preserve"><value>
Procedimento GravitySort()
inicio
	Inteiro max = vetor.Max().Valor;
	Array[] abacus;
	Inteiro i;
	Inteiro j;
	Inteiro posicaoqueda;
	Inteiro contagem;
	Inteiro x;
	Inteiro y;

	abacus = new Array[vetor.Tamanho];
	para (i = 0; i &lt; abacus.Tamanho; i++)
	inicio
		abacus[i] = new Inteiro[max];
	fim
	para (i = 0; i &lt; vetor.Tamanho; i++)
	inicio
		para (j = 0; j &lt; vetor[i].Valor; j++)
		inicio
			abacus[i].SetValue(1, abacus[0].Tamanho - j - 1);
		fim
	fim
	para (i = 0; i &lt; abacus[0].Tamanho; i++)
	inicio
		para (j = 0; j &lt; abacus.Tamanho; j++)
		inicio
			Se ((Inteiro)abacus[j].GetValue(i) == 1)
			inicio
				posicaoqueda = j;
				Faça Enquanto (posicaoqueda + 1 &lt; abacus.Tamanho &amp;&amp; (Inteiro)abacus[posicaoqueda].GetValue(i) == 1)
				inicio
					posicaoqueda++;
				fim
				Se ((Inteiro)abacus[posicaoqueda].GetValue(i) == 0)
				inicio
					abacus[j].SetValue(0, i);
					abacus[posicaoqueda].SetValue(1, i);
				fim
			fim
		fim
		contagem = 0;
		para (x = 0; x &lt; abacus.Tamanho; x++)
		inicio
			contagem = 0;
			para (y = 0; y &lt; abacus[0].Tamanho; y++)
			inicio
				contagem += (Inteiro)abacus[x].GetValue(y);
			fim
			vetor[x].Valor = contagem;
		fim
	fim
fim
</value></data>
<data name="TournamentSortString" xml:space="preserve"><value>
Inteiro[] tmp;

Função Inteiro vencedor(Inteiro pos1, Inteiro pos2)
inicio
	Inteiro u = pos1 &gt;= vetor.Tamanho ? pos1 : tmp[pos1];
	Inteiro v = pos2 &gt;= vetor.Tamanho ? pos2 : tmp[pos2];
	Se (tmp[u] &lt;= tmp[v]) Retorne_Função u;
	Retorne_Função v;
fim

Procedimento criaArvore(ref Inteiro valor)
inicio
	para (Inteiro i = 0; i &lt; vetor.Tamanho; i++) tmp[vetor.Tamanho + i] = vetor[i].Valor;
	para (Inteiro i = 2 * vetor.Tamanho - 1; i &gt; 1; i -= 2)
	inicio
		Inteiro k = i / 2;
		Inteiro j = i - 1;
		tmp[k] = vencedor(i, j);
	fim
	valor = tmp[tmp[1]];
	tmp[tmp[1]] = int.MaxValue;
fim

Procedimento recriar(ref Inteiro valor)
inicio
	Inteiro i = tmp[1];
	Faça Enquanto (i &gt; 1)
	inicio
		Inteiro j, k = i / 2;
		Se (i % 2 == 0 &amp;&amp; i &lt; 2 * vetor.Tamanho - 1)
			j = i + 1;
		Senão
			j = i - 1;
		tmp[k] = vencedor(i, j);
		i = k;
	fim
	valor = tmp[tmp[1]];
	tmp[tmp[1]] = int.MaxValue;
fim

Procedimento tournamentSort()
inicio
	Inteiro valor = 0;
	Inteiro max = vetor.Tamanho;

	tmp = novo Inteiro[vetor.Tamanho &lt;&lt; 1];
	criaArvore(ref valor);
	para (Inteiro i = 0; i &lt; vetor.Tamanho; i++)
	inicio
		vetor[i].Valor = valor;
		recriar(ref valor);
	fim
fim
</value></data>
<data name="AmericanSortString" xml:space="preserve"><value>
constante Inteiro NUMERO_DE_BALDES = 128;

Função Inteiro MaximoDigitos()
inicio
	Inteiro max = int.MinValue;
	Inteiro temp = 0;
	para (Inteiro i = 0; i &lt; vetor.Tamanho; i++)
	inicio
		temp = (Inteiro)(Math.Log(vetor[i].Valor) / Math.Log(NUMERO_DE_BALDES)) + 1;
		Se (temp &gt; max)
			max = temp;
	fim
	Retorne_Função max;
fim

Função Inteiro Digitos(Inteiro i, Inteiro d)
inicio
	Retorne_Função (i / d) % NUMERO_DE_BALDES;
fim

Procedimento AmericanSort(Inteiro inicio, Inteiro tam, Inteiro divisor)
inicio
	Inteiro[] contagem = new Inteiro[NUMERO_DE_BALDES];
	Inteiro[] offset = new Inteiro[NUMERO_DE_BALDES];
	Inteiro digitos = 0;
	//passo 1
	piv1.Value = 1;
	piv1.Maximum = tam;
	para (Inteiro i = inicio; i &lt; tam; i++)
	inicio
		Inteiro d = vetor[i].Valor;
		digitos = Digitos(d, divisor);
		contagem[digitos]++;
	fim
	offset[0] = inicio;
	para (Inteiro i = 1; i &lt; NUMERO_DE_BALDES; i++)
	inicio
		offset[i] = contagem[i - 1] + offset[i - 1];
	fim
	//passo 2
	para (Inteiro b = 0; b &lt; NUMERO_DE_BALDES; b++)
	inicio
		Faça Enquanto (contagem[b] &gt; 0)
		inicio
			Inteiro origem = offset[b];
			Inteiro fonte = origem;
			Inteiro num = vetor[fonte].Valor;
			Faça
				digitos = Digitos(num, divisor);
				Inteiro destino = offset[digitos];
				offset[digitos]++;
				contagem[digitos]--;
				Inteiro temp = vetor[destino].Valor;
				vetor[destino].Valor = num;
				num = temp;
				fonte = destino;
			Até Que (fonte != origem);
		fim
	fim
	Se (divisor &gt; 1)
	inicio
		para (Inteiro i = 0; i &lt; NUMERO_DE_BALDES; i++)
		inicio
			Inteiro comeco = (i &gt; 0) ? offset[i - 1] : inicio;
			Inteiro final = offset[i];
			Se (final - comeco &gt; 1)
				AmericanSort(comeco, final, divisor / NUMERO_DE_BALDES);
		fim
	fim
fim
Procedimento AmericanSort()
inicio
	Inteiro digitos = MaximoDigitos();
	Inteiro max = 1;
	para (Inteiro i = 0; i &lt; digitos - 1; i++)
	inicio
		max *= NUMERO_DE_BALDES;
	fim
	AmericanSort(0, vetor.Tamanho, max);
fim
</value></data>
<data name="SimplisticGravitySortString" xml:space="preserve"><value>
Procedimento SimplisticGravitySort()
inicio
	Inteiro[] aux;
	Inteiro min = vetor[0].Valor;
	Inteiro max = min;
	Inteiro pointer;
	Inteiro index;
	Inteiro fator = vetor.Tamanho / 10;
	para (Inteiro mainPointer = 1; mainPointer &lt; vetor.Tamanho; mainPointer++)
	inicio
		min = Math.Min(vetor[mainPointer].Valor, min);
		max = Math.Max(vetor[mainPointer].Valor, max);
	fim
	aux = novo Inteiro[max - min];
	para (Inteiro mainPointer = 0; mainPointer &lt; vetor.Tamanho; mainPointer++)
	inicio
		index = mainPointer;
		para (pointer = 0; vetor[index].Valor &gt; min; pointer++)
		inicio
			vetor[index].Valor = --vetor[index].Valor;
			aux[pointer] = ++aux[pointer];
		fim
	fim
	para (Inteiro mainPointer = vetor.Tamanho - 1; mainPointer &gt;= 0; mainPointer--)
	inicio
		index = mainPointer;
		para (pointer = 0; pointer &lt; aux.Tamanho &amp;&amp; aux[pointer] != 0; pointer++)
		inicio
			vetor[index].Valor = ++vetor[index].Valor;
			aux[pointer] = --aux[pointer];
		fim
	fim
fim
</value></data>
<data name="SandpaperSortString" xml:space="preserve"><value>
Procedimento SandpaperSort()
inicio
	para (Inteiro i = 0; i &lt; vetor.Tamanho - 1; i++)
	inicio
		para (Inteiro j = i + 1; j &lt; vetor.Tamanho; j++)
		inicio
			Se (vetor[i].Valor &gt; vetor[j].Valor)
			inicio
				Troca(i, j);
			fim
		fim
	fim
fim
</value></data>
<data name="DiamondSortString" xml:space="preserve"><value>
Procedimento DiamondSort()
inicio
	Inteiro n = 1;
	para (; n &lt; vetor.Tamanho; n *= 2) ;

	Inteiro m = 4;
	para (; m &lt;= n; m *= 2)
	inicio
		para (Inteiro k = 0; k &lt; m / 2; k++)
		inicio
			Inteiro cnt = k &lt;= m / 4 ? k : m / 2 - k;
			para (Inteiro j = 0; j &lt; vetor.Tamanho; j += m)
			inicio
				Se (j + cnt + 1 &lt; vetor.Tamanho)
				inicio
					para (Inteiro i = j + cnt; i + 1 &lt; Math.Min(vetor.Tamanho, j + m - cnt); i += 2)
					inicio
						Se (vetor[i].Valor &gt; vetor[i + 1].Valor)
						inicio
							Troca(i, i + 1);
						fim
					fim
				fim
			fim
		fim
	fim
	m /= 2;
	para (Inteiro k = 0; k &lt;= m / 2; k++)
	inicio
		para (Inteiro i = k; i + 1 &lt; Math.Min(vetor.Tamanho, m - k); i += 2)
		inicio
			Se (vetor[i].Valor &gt; vetor[i + 1].Valor)
			inicio
				Troca(i, i + 1);
			fim
		fim
	fim
fim
</value></data>
</root>